// Set up search schema (Use different marketplace ID ?)
flex-cli search set --schema-for userProfile --scope metadata --key identityVerified --type boolean -m wonstest1-saunatime-demo
flex-cli search set --schema-for userProfile --scope private --key gender --type enum -m wonstest1-saunatime-demo
flex-cli search set --schema-for userProfile --scope protected --key discoveredServiceVia --type enum -m wonstest1-saunatime-demo
flex-cli search set --schema-for userProfile --scope public --key rank --type long -m wonstest1-saunatime-demo
const { reviver, replacer, UUID } = require('sharetribe-flex-sdk').types;

// Set up REPL (don' show)

const clientId = "94ca3423-4824-4ec3-a847-e00213ba760e";
const clientSecret = "7088fff35c90e272d0788bdec79de5f7825b353f";
const integrationSdk = sharetribeIntegrationSdk.createInstance({
  clientId,
  clientSecret,
  tokenStore: sharetribeIntegrationSdk.tokenStore.memoryStore(),
});

// demo
// Step 1. Let's get some user emails and their IDs using the emails!

integrationSdk.users.query().then(res => {
  console.log(res.data.data.map(user => user.attributes.email));
});

integrationSdk.users.show({email: "david.dickens@example.com"}).then((response) => {
  console.log(response.data.data.id);
});

integrationSdk.users.show({email: "anna.anderson@example.com"}).then((response) => {
  console.log(response.data.data.id);
});

integrationSdk.users.show({email: "jenna.jones@example.com"}).then((response) => {
  console.log(response.data.data.id);
});

// Step 2. Let's add some extended data to users so that we can use it for querying!

integrationSdk.users.updateProfile(
    {
      id: "61c9dfef-20d8-4a59-aa39-b2de75b4b8f2",
      protectedData: {
        discoveredServiceVia: "google",
      },
      metadata: {
        identityVerified: true,
        rank: 9,
      }
    },
    { expand: true }).then((res) => console.log(res.data.data.attributes));

integrationSdk.users.updateProfile(
    {
      id: "61c9dfef-3b17-4ea8-a53b-06cca37e1ec0",
      protectedData: {
        discoveredServiceVia: "twitter",
      },
      metadata: {
        identityVerified: true,
        rank: 50,
      }
    },
    { expand: true }).then((res) => console.log(res.data.data.attributes));

integrationSdk.users.updateProfile(
    {
      id: "61c9dfef-7467-45f5-a665-9ee9caa3d289",
      protectedData: {
        discoveredServiceVia: "google",
      },
      metadata: {
        identityVerified: false,
        rank: 85,
      }
    },
    { expand: true }).then((res) => console.log(res.data.data.attributes));

// Step 3. Let's query users using the extended data!
// From this part, only works when corresponding search schema is set

integrationSdk.users.query({prot_discoveredServiceVia: "google", meta_identityVerified: true}).then((res) => console.log(res.data.data.map(user => user.attributes.profile)));

// Step 4. Let's try sorting the queried users as well!

integrationSdk.users.query({sort: "pub_rank"}).then((res) => console.log(res.data.data.map(user => user.attributes.profile)));
integrationSdk.users.query({sort: "-pub_rank"}).then((res) => console.log(res.data.data.map(user => user.attributes.profile)));
